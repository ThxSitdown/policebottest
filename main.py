import discord
import os
import gspread
import json
import re
import logging
import threading
import requests
import time
from oauth2client.service_account import ServiceAccountCredentials
from flask import Flask
from discord.ext import commands
import datetime

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Discord Bot
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
intents.presences = True

bot = commands.Bot(command_prefix="!", intents=intents)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Flask App
app = Flask(__name__)

@app.route('/')
def index():
    return "Bot is running."

@app.route('/health')
def health_check():
    return {"status": "ok", "bot_status": bot.is_ready()}

def run_flask():
    try:
        logging.info("üåç Starting Flask on port 5000...")
        app.run(host="0.0.0.0", port=5000, threaded=True)
    except Exception as e:
        logging.error(f"‚ùå Flask app error: {e}")

@bot.event
async def on_ready():
    logging.info(f"ü§ñ {bot.user} is online and ready!")
    await bot.change_presence(activity=discord.Game(name="Roblox"))

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Sheets
SCOPE = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
GOOGLE_CREDENTIALS = os.getenv("GOOGLE_CREDENTIALS")
sheet, log_red_case, log_black_case = None, None, None

if GOOGLE_CREDENTIALS:
    try:
        creds = ServiceAccountCredentials.from_json_keyfile_dict(json.loads(GOOGLE_CREDENTIALS), SCOPE)
        client = gspread.authorize(creds)
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ä‡∏µ‡∏ï‡∏´‡∏•‡∏±‡∏Å "PoliceDutytest"
        sheet = client.open("PoliceDutytest").worksheet("Sheet1")
        logging.info("‚úÖ Google Sheets (PoliceDutytest) ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ä‡∏µ‡∏ï "PoliceCase"
        police_case_sheet = client.open("PoliceCase")
        log_red_case = police_case_sheet.worksheet("logREDcase")
        log_black_case = police_case_sheet.worksheet("logBlackcase")
        logging.info("‚úÖ Google Sheets (PoliceCase) ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

    except Exception as e:
        logging.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets: {e}")
else:
    logging.warning("‚ö†Ô∏è GOOGLE_CREDENTIALS not found.")

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
DUTY_CHANNEL_ID = 1330215305066188864  
CASE_CHANNEL_ID = 1350960006073159802 

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY HH:MM:SS
def format_datetime(raw_time):
    pattern = r"(\d{1,2})/(\d{1,2})/(\d{4})\s+(\d{1,2}):(\d{2}):(\d{2})"
    match = re.search(pattern, raw_time)
    
    if match:
        day, month, year, hour, minute, second = match.groups()
        formatted_time = f"{int(day):02d}/{int(month):02d}/{year} {int(hour):02d}:{int(minute):02d}:{int(second):02d}"
        logging.info(f"üïí ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤ {raw_time} ‚ûù {formatted_time}")
        return formatted_time
    else:
        logging.warning(f"‚ö†Ô∏è ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {raw_time}")
        return raw_time

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Google Sheets
def save_to_sheet(sheet, values):
    try:
        last_row = len(sheet.col_values(1)) + 1
        sheet.update(f"A{last_row}:D{last_row}", [values])
        logging.info(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Google Sheets: {values}")
    except Exception as e:
        logging.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Google Sheets: {e}")

@bot.event
async def on_message(message):
    if message.author.bot:
        content = message.content.strip()

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏á‡∏≤‡∏ô (PoliceDutytest)
        if message.channel.id == DUTY_CHANNEL_ID and message.author.name == "Captain Hook":
            name, steam_id, check_in_time, check_out_time = None, None, None, None

            if message.embeds:
                for embed in message.embeds:
                    for field in embed.fields:
                        if "‡∏ä‡∏∑‡πà‡∏≠" in field.name:
                            name = field.value.strip("`").strip()
                        elif "‡πÑ‡∏≠‡∏î‡∏µ" in field.name:
                            steam_id = field.value.strip().replace("steam:", "")
                        elif "‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô" in field.name:
                            check_in_time = format_datetime(field.value.strip())
                        elif "‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô" in field.name:
                            check_out_time = format_datetime(field.value.strip())

            # ‡πÉ‡∏ä‡πâ Regex ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏™‡∏≥‡∏£‡∏≠‡∏á
            if not all([name, steam_id, check_in_time, check_out_time]):
                pattern = r"‡∏ä‡∏∑‡πà‡∏≠\s*(.+?)\s*‡πÑ‡∏≠‡∏î‡∏µ\s*steam:(\S+)\s*‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô\s*(?:\S+\s-\s)?([\d/]+\s[\d:]+)\s*‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô\s*(?:\S+\s-\s)?([\d/]+\s[\d:]+)"
                match = re.search(pattern, content, re.DOTALL | re.MULTILINE | re.IGNORECASE)

                if match:
                    name = match.group(1).strip("`").strip()
                    steam_id = match.group(2).strip()
                    check_in_time = format_datetime(match.group(3).strip())
                    check_out_time = format_datetime(match.group(4).strip())

            # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Google Sheets ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö
            if all([name, steam_id, check_in_time, check_out_time]) and sheet:
                save_to_sheet(sheet, [name, steam_id, check_in_time, check_out_time])
            else:
                logging.warning("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ!")

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏î‡∏µ (PoliceCase)
        elif message.channel.id == CASE_CHANNEL_ID:
            logging.info(f"üìå Raw case message: {repr(content)}")

            case_match = re.search(r"Name:\s*([^\n]+).*?‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Ñ‡∏î‡∏µ\s*([^\n]+)", content, re.DOTALL | re.IGNORECASE)
            
            if case_match:
                officer_name = case_match.group(1).strip()
                case_details = case_match.group(2).strip()
                logging.info(f"‚úÖ Extracted case - Officer: {officer_name}, Case: {case_details}")

                if "RED" in case_details and log_red_case:
                    logging.info("üö® RED case detected, saving to logREDcase")
                    save_to_sheet(log_red_case, [officer_name, case_details])
                elif log_black_case:
                    logging.info("üìÅ Black case detected, saving to logBlackcase")
                    save_to_sheet(log_black_case, [officer_name, case_details])
            else:
                logging.warning("‚ö†Ô∏è Case format not recognized")

    await bot.process_commands(message)

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Keep-Alive
KEEP_ALIVE_URL = "https://policebottest.onrender.com/health"

def keep_alive():
    while True:
        try:
            response = requests.get(KEEP_ALIVE_URL)
            if response.status_code == 200:
                logging.info("‚úÖ Keep-alive successful.")
            else:
                logging.warning(f"‚ö†Ô∏è Keep-alive failed (Status: {response.status_code})")
        except Exception as e:
            logging.error(f"‚ùå Keep-alive error: {e}")
        time.sleep(40)

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó
def run_discord_bot():
    DISCORD_BOT_TOKEN = os.getenv("DISCORD_BOT_TOKEN")
    if not DISCORD_BOT_TOKEN:
        logging.error("‚ùå DISCORD_BOT_TOKEN not found. Bot will not start.")
        return
    
    try:
        logging.info("üöÄ Starting Discord Bot...")
        bot.run(DISCORD_BOT_TOKEN)
    except discord.errors.LoginFailure:
        logging.error("‚ùå Invalid Discord Bot Token!")
    except Exception as e:
        logging.error(f"‚ùå Discord bot error: {e}")

# ‚úÖ Main
if __name__ == "__main__":
    threading.Thread(target=run_flask, daemon=True).start()
    threading.Thread(target=keep_alive, daemon=True).start()
    run_discord_bot()
